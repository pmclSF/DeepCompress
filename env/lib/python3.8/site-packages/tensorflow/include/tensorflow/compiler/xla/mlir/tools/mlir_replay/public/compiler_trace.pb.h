// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/xla/mlir/tools/mlir_replay/public/compiler_trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
namespace mlir {
namespace interpreter {
class MlirCompilationTrace;
struct MlirCompilationTraceDefaultTypeInternal;
extern MlirCompilationTraceDefaultTypeInternal _MlirCompilationTrace_default_instance_;
class MlirCompilationTraceEntry;
struct MlirCompilationTraceEntryDefaultTypeInternal;
extern MlirCompilationTraceEntryDefaultTypeInternal _MlirCompilationTraceEntry_default_instance_;
}  // namespace interpreter
}  // namespace mlir
PROTOBUF_NAMESPACE_OPEN
template<> ::mlir::interpreter::MlirCompilationTrace* Arena::CreateMaybeMessage<::mlir::interpreter::MlirCompilationTrace>(Arena*);
template<> ::mlir::interpreter::MlirCompilationTraceEntry* Arena::CreateMaybeMessage<::mlir::interpreter::MlirCompilationTraceEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mlir {
namespace interpreter {

// ===================================================================

class MlirCompilationTraceEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mlir.interpreter.MlirCompilationTraceEntry) */ {
 public:
  inline MlirCompilationTraceEntry() : MlirCompilationTraceEntry(nullptr) {}
  ~MlirCompilationTraceEntry() override;
  explicit PROTOBUF_CONSTEXPR MlirCompilationTraceEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MlirCompilationTraceEntry(const MlirCompilationTraceEntry& from);
  MlirCompilationTraceEntry(MlirCompilationTraceEntry&& from) noexcept
    : MlirCompilationTraceEntry() {
    *this = ::std::move(from);
  }

  inline MlirCompilationTraceEntry& operator=(const MlirCompilationTraceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MlirCompilationTraceEntry& operator=(MlirCompilationTraceEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MlirCompilationTraceEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MlirCompilationTraceEntry* internal_default_instance() {
    return reinterpret_cast<const MlirCompilationTraceEntry*>(
               &_MlirCompilationTraceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MlirCompilationTraceEntry& a, MlirCompilationTraceEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MlirCompilationTraceEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MlirCompilationTraceEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MlirCompilationTraceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MlirCompilationTraceEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MlirCompilationTraceEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MlirCompilationTraceEntry& from) {
    MlirCompilationTraceEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MlirCompilationTraceEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mlir.interpreter.MlirCompilationTraceEntry";
  }
  protected:
  explicit MlirCompilationTraceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfterPassFieldNumber = 1,
    kMlirModuleFieldNumber = 2,
  };
  // optional string after_pass = 1;
  bool has_after_pass() const;
  private:
  bool _internal_has_after_pass() const;
  public:
  void clear_after_pass();
  const std::string& after_pass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_after_pass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_after_pass();
  PROTOBUF_NODISCARD std::string* release_after_pass();
  void set_allocated_after_pass(std::string* after_pass);
  private:
  const std::string& _internal_after_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_after_pass(const std::string& value);
  std::string* _internal_mutable_after_pass();
  public:

  // optional string mlir_module = 2;
  bool has_mlir_module() const;
  private:
  bool _internal_has_mlir_module() const;
  public:
  void clear_mlir_module();
  const std::string& mlir_module() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mlir_module(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mlir_module();
  PROTOBUF_NODISCARD std::string* release_mlir_module();
  void set_allocated_mlir_module(std::string* mlir_module);
  private:
  const std::string& _internal_mlir_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mlir_module(const std::string& value);
  std::string* _internal_mutable_mlir_module();
  public:

  // @@protoc_insertion_point(class_scope:mlir.interpreter.MlirCompilationTraceEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr after_pass_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mlir_module_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
};
// -------------------------------------------------------------------

class MlirCompilationTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mlir.interpreter.MlirCompilationTrace) */ {
 public:
  inline MlirCompilationTrace() : MlirCompilationTrace(nullptr) {}
  ~MlirCompilationTrace() override;
  explicit PROTOBUF_CONSTEXPR MlirCompilationTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MlirCompilationTrace(const MlirCompilationTrace& from);
  MlirCompilationTrace(MlirCompilationTrace&& from) noexcept
    : MlirCompilationTrace() {
    *this = ::std::move(from);
  }

  inline MlirCompilationTrace& operator=(const MlirCompilationTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline MlirCompilationTrace& operator=(MlirCompilationTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MlirCompilationTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const MlirCompilationTrace* internal_default_instance() {
    return reinterpret_cast<const MlirCompilationTrace*>(
               &_MlirCompilationTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MlirCompilationTrace& a, MlirCompilationTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(MlirCompilationTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MlirCompilationTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MlirCompilationTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MlirCompilationTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MlirCompilationTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MlirCompilationTrace& from) {
    MlirCompilationTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MlirCompilationTrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mlir.interpreter.MlirCompilationTrace";
  }
  protected:
  explicit MlirCompilationTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassesFieldNumber = 1,
  };
  // repeated .mlir.interpreter.MlirCompilationTraceEntry passes = 1;
  int passes_size() const;
  private:
  int _internal_passes_size() const;
  public:
  void clear_passes();
  ::mlir::interpreter::MlirCompilationTraceEntry* mutable_passes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >*
      mutable_passes();
  private:
  const ::mlir::interpreter::MlirCompilationTraceEntry& _internal_passes(int index) const;
  ::mlir::interpreter::MlirCompilationTraceEntry* _internal_add_passes();
  public:
  const ::mlir::interpreter::MlirCompilationTraceEntry& passes(int index) const;
  ::mlir::interpreter::MlirCompilationTraceEntry* add_passes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >&
      passes() const;

  // @@protoc_insertion_point(class_scope:mlir.interpreter.MlirCompilationTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry > passes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MlirCompilationTraceEntry

// optional string after_pass = 1;
inline bool MlirCompilationTraceEntry::_internal_has_after_pass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MlirCompilationTraceEntry::has_after_pass() const {
  return _internal_has_after_pass();
}
inline void MlirCompilationTraceEntry::clear_after_pass() {
  _impl_.after_pass_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MlirCompilationTraceEntry::after_pass() const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  return _internal_after_pass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MlirCompilationTraceEntry::set_after_pass(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.after_pass_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}
inline std::string* MlirCompilationTraceEntry::mutable_after_pass() {
  std::string* _s = _internal_mutable_after_pass();
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  return _s;
}
inline const std::string& MlirCompilationTraceEntry::_internal_after_pass() const {
  return _impl_.after_pass_.Get();
}
inline void MlirCompilationTraceEntry::_internal_set_after_pass(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.after_pass_.Set(value, GetArenaForAllocation());
}
inline std::string* MlirCompilationTraceEntry::_internal_mutable_after_pass() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.after_pass_.Mutable(GetArenaForAllocation());
}
inline std::string* MlirCompilationTraceEntry::release_after_pass() {
  // @@protoc_insertion_point(field_release:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
  if (!_internal_has_after_pass()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.after_pass_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.after_pass_.IsDefault()) {
    _impl_.after_pass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MlirCompilationTraceEntry::set_allocated_after_pass(std::string* after_pass) {
  if (after_pass != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.after_pass_.SetAllocated(after_pass, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.after_pass_.IsDefault()) {
    _impl_.after_pass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mlir.interpreter.MlirCompilationTraceEntry.after_pass)
}

// optional string mlir_module = 2;
inline bool MlirCompilationTraceEntry::_internal_has_mlir_module() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MlirCompilationTraceEntry::has_mlir_module() const {
  return _internal_has_mlir_module();
}
inline void MlirCompilationTraceEntry::clear_mlir_module() {
  _impl_.mlir_module_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MlirCompilationTraceEntry::mlir_module() const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  return _internal_mlir_module();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MlirCompilationTraceEntry::set_mlir_module(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mlir_module_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}
inline std::string* MlirCompilationTraceEntry::mutable_mlir_module() {
  std::string* _s = _internal_mutable_mlir_module();
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  return _s;
}
inline const std::string& MlirCompilationTraceEntry::_internal_mlir_module() const {
  return _impl_.mlir_module_.Get();
}
inline void MlirCompilationTraceEntry::_internal_set_mlir_module(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mlir_module_.Set(value, GetArenaForAllocation());
}
inline std::string* MlirCompilationTraceEntry::_internal_mutable_mlir_module() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mlir_module_.Mutable(GetArenaForAllocation());
}
inline std::string* MlirCompilationTraceEntry::release_mlir_module() {
  // @@protoc_insertion_point(field_release:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
  if (!_internal_has_mlir_module()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mlir_module_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mlir_module_.IsDefault()) {
    _impl_.mlir_module_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MlirCompilationTraceEntry::set_allocated_mlir_module(std::string* mlir_module) {
  if (mlir_module != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mlir_module_.SetAllocated(mlir_module, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mlir_module_.IsDefault()) {
    _impl_.mlir_module_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mlir.interpreter.MlirCompilationTraceEntry.mlir_module)
}

// -------------------------------------------------------------------

// MlirCompilationTrace

// repeated .mlir.interpreter.MlirCompilationTraceEntry passes = 1;
inline int MlirCompilationTrace::_internal_passes_size() const {
  return _impl_.passes_.size();
}
inline int MlirCompilationTrace::passes_size() const {
  return _internal_passes_size();
}
inline void MlirCompilationTrace::clear_passes() {
  _impl_.passes_.Clear();
}
inline ::mlir::interpreter::MlirCompilationTraceEntry* MlirCompilationTrace::mutable_passes(int index) {
  // @@protoc_insertion_point(field_mutable:mlir.interpreter.MlirCompilationTrace.passes)
  return _impl_.passes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >*
MlirCompilationTrace::mutable_passes() {
  // @@protoc_insertion_point(field_mutable_list:mlir.interpreter.MlirCompilationTrace.passes)
  return &_impl_.passes_;
}
inline const ::mlir::interpreter::MlirCompilationTraceEntry& MlirCompilationTrace::_internal_passes(int index) const {
  return _impl_.passes_.Get(index);
}
inline const ::mlir::interpreter::MlirCompilationTraceEntry& MlirCompilationTrace::passes(int index) const {
  // @@protoc_insertion_point(field_get:mlir.interpreter.MlirCompilationTrace.passes)
  return _internal_passes(index);
}
inline ::mlir::interpreter::MlirCompilationTraceEntry* MlirCompilationTrace::_internal_add_passes() {
  return _impl_.passes_.Add();
}
inline ::mlir::interpreter::MlirCompilationTraceEntry* MlirCompilationTrace::add_passes() {
  ::mlir::interpreter::MlirCompilationTraceEntry* _add = _internal_add_passes();
  // @@protoc_insertion_point(field_add:mlir.interpreter.MlirCompilationTrace.passes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mlir::interpreter::MlirCompilationTraceEntry >&
MlirCompilationTrace::passes() const {
  // @@protoc_insertion_point(field_list:mlir.interpreter.MlirCompilationTrace.passes)
  return _impl_.passes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interpreter
}  // namespace mlir

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fxla_2fmlir_2ftools_2fmlir_5freplay_2fpublic_2fcompiler_5ftrace_2eproto
