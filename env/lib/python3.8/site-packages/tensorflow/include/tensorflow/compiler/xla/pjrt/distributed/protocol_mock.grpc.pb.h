// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tensorflow/compiler/xla/pjrt/distributed/protocol.proto

#include "tensorflow/compiler/xla/pjrt/distributed/protocol.pb.h"
#include "tensorflow/compiler/xla/pjrt/distributed/protocol.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace xla {


namespace grpc {

class MockDistributedRuntimeServiceStub : public DistributedRuntimeService::StubInterface {
 public:
  MOCK_METHOD3(Connect, ::grpc::Status(::grpc::ClientContext* context, const ::xla::ConnectRequest& request, ::xla::ConnectResponse* response));
  MOCK_METHOD3(AsyncConnectRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::ConnectResponse>*(::grpc::ClientContext* context, const ::xla::ConnectRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncConnectRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::ConnectResponse>*(::grpc::ClientContext* context, const ::xla::ConnectRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EnumerateDevices, ::grpc::Status(::grpc::ClientContext* context, const ::xla::EnumerateDevicesRequest& request, ::xla::EnumerateDevicesResponse* response));
  MOCK_METHOD3(AsyncEnumerateDevicesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::EnumerateDevicesResponse>*(::grpc::ClientContext* context, const ::xla::EnumerateDevicesRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEnumerateDevicesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::EnumerateDevicesResponse>*(::grpc::ClientContext* context, const ::xla::EnumerateDevicesRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Heartbeat, ::grpc::Status(::grpc::ClientContext* context, const ::xla::HeartbeatRequest& request, ::xla::HeartbeatResponse* response));
  MOCK_METHOD3(AsyncHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::HeartbeatResponse>*(::grpc::ClientContext* context, const ::xla::HeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::HeartbeatResponse>*(::grpc::ClientContext* context, const ::xla::HeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Shutdown, ::grpc::Status(::grpc::ClientContext* context, const ::xla::ShutdownRequest& request, ::xla::ShutdownResponse* response));
  MOCK_METHOD3(AsyncShutdownRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::ShutdownResponse>*(::grpc::ClientContext* context, const ::xla::ShutdownRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncShutdownRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::ShutdownResponse>*(::grpc::ClientContext* context, const ::xla::ShutdownRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(KeyValueGet, ::grpc::Status(::grpc::ClientContext* context, const ::xla::KeyValueGetRequest& request, ::xla::KeyValueGetResponse* response));
  MOCK_METHOD3(AsyncKeyValueGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::KeyValueGetResponse>*(::grpc::ClientContext* context, const ::xla::KeyValueGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncKeyValueGetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::KeyValueGetResponse>*(::grpc::ClientContext* context, const ::xla::KeyValueGetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(KeyValueSet, ::grpc::Status(::grpc::ClientContext* context, const ::xla::KeyValueSetRequest& request, ::xla::KeyValueSetResponse* response));
  MOCK_METHOD3(AsyncKeyValueSetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::KeyValueSetResponse>*(::grpc::ClientContext* context, const ::xla::KeyValueSetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncKeyValueSetRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::KeyValueSetResponse>*(::grpc::ClientContext* context, const ::xla::KeyValueSetRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(WaitAtBarrier, ::grpc::Status(::grpc::ClientContext* context, const ::xla::WaitAtBarrierRequest& request, ::xla::WaitAtBarrierResponse* response));
  MOCK_METHOD3(AsyncWaitAtBarrierRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::WaitAtBarrierResponse>*(::grpc::ClientContext* context, const ::xla::WaitAtBarrierRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncWaitAtBarrierRaw, ::grpc::ClientAsyncResponseReaderInterface< ::xla::WaitAtBarrierResponse>*(::grpc::ClientContext* context, const ::xla::WaitAtBarrierRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace grpc

} // namespace xla

